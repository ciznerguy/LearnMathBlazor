@page "/Game"
@using BlazorApp2.Utilities
@using System.Threading.Tasks

<!-- Game.razor -->
<style>
    .yellow-frame {
        border: 4px solid yellow;
        padding: 40px;
    }

    .game-over-message {
        background-color: @(isGameOver ? "red" : "green");
        color: white;
        padding: 10px;
        border-radius: 5px;
    }
</style>

<div class="text-center yellow-frame">
    <h3>Welcome to Math Game Page!</h3>
    <br>
    <br>

    <label>Number of Questions: @questionCount   Number Of Correct Answers @correctCount</label>
    <br>
    <br>
    <br>
    <br>
    <br>
    <div class="d-flex justify-content-center">
        <div class="mx-3">
            <input type="text" class="form-control" style="width: 200px;" value="@gameLogic.GetNumber1()" readonly />
        </div>
        <div class="mx-3">
            <label class="op" style="font-size: 30px;">@gameLogic.GetOp()</label>
        </div>
        <div class="mx-3">
            <input type="text" class="form-control" style="width: 200px;" value="@gameLogic.GetNumber2()" readonly />
        </div>
        <div class="mx-3">
            <label class="my-1" style="font-size: 40px;">=</label>
        </div>
        <div class="mx-3">
            <input type="text" class="form-control" style="width: 200px;" @bind="userAnswer" placeholder="Editable Textbox" />
        </div>
    </div>

    <button class="btn btn-primary mt-5" @onclick="SubmitClick">Submit</button>

    <div class="mt-3">
        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert alert-info game-over-message" role="alert">
                @message
            </div>
        }
    </div>
</div>

@code {
    private OneGameLogic gameLogic = new OneGameLogic(chooseOp());
    private string userAnswer = "";
    private string message = "";
    private int questionCount = 1;
    private int correctCount = 0;
    private bool isGameOver = false;

    private async Task SubmitClick()
    {
        if (questionCount > 4)
        {
            message = $"Game Over. You Got {correctCount} From {questionCount}";

            StateHasChanged();


        
            isGameOver = true;

    

    
            StateHasChanged();

            // Exit the method since the game is over
            return;
        }

        if (int.TryParse(userAnswer, out int userAnswerValue))
        {
            bool isCorrect = gameLogic.CheckCorrectAnswer(userAnswerValue);
            message = isCorrect ? "Correct Answer" : "Incorrect Answer";
            if (isCorrect)
            {
                correctCount++;
            }
        }
        else
        {
            message = "Incorrect Format";
        }

        // Delay for 3 seconds
        await Task.Delay(1000);

        // Load a new set of numbers
        InitializeGame();

        // Increment questionCount after loading new numbers
        questionCount++;

        // Clear the message
        message = "";

        // Update the UI
        StateHasChanged();
    }

    private void InitializeGame()
    {
        // Reset user answer
        userAnswer = "";

        // Generate a new set of numbers and operator
        gameLogic = new OneGameLogic(chooseOp());

        // Reset isGameOver to false
        isGameOver = false;
    }

    protected override void OnInitialized()
    {
        InitializeGame();
    }

    public static int chooseOp()
    {
        Random random = new Random();
        int gameKind = random.Next(2);
        return gameKind;
    }
}
